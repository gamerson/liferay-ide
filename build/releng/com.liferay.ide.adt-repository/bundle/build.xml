<project name="bundle" default="all" basedir=".">

	<!--
		Updatesite has been built, here are the steps for building the product.
		1. unzip the builder (eclipse SDK, download if needed)
		2. unzip the latest release (helios)
		3. Install Liferay features into helios build
		9. Zip up parent directory as zip file.
	-->

	<property environment="env" />

	<property file="bundle.${user.name}.properties" />
	<property file="bundle.${env.COMPUTERNAME}.properties" />
	<property file="bundle.${env.HOST}.properties" />
	<property file="bundle.${env.HOSTNAME}.properties" />
	<property file="bundle.properties" />

	<property environment="env" />

	<property name="package.target" value="output-zip"/>

	<target name="all">
		<path id="lib.classpath">
			<fileset dir="${basedir}/lib" includes="*.jar" />
		</path>

		<taskdef classpathref="lib.classpath" resource="net/sf/antcontrib/antlib.xml" />

		<property file="${basedir}/bundle.properties" />

		<antcall target="bundle"/>
	</target>

    <target name="maven-build" if="create.bundles">
    	<property name="rootdir" value="${basedir}/bundle"/>

    	<property name="target.dir" value="${basedir}/target"/>

    	<property file="${basedir}/bundle/bundle.properties" />

    	<antcall target="bundle"/>
    </target>

	<target name="bundle">
		<antcall target="win64" />
		<antcall target="win32" />

		<condition property="isLinux" value="true">
			<os family="unix" />
		</condition>
		<if>
			<isset property="isLinux"/>
			<then>
				<antcall target="linux" />
				<antcall target="macosx" />
				<antcall target="linux64" />
				<antcall target="macosx64" />
			</then>
		</if>
	</target>

	<target name="create-bundle">
		<antcall target="install-adt-ide-features"/>
		<antcallback target="install-tools-features" return="version" />
		<antcallback target="install-adt-features" return="final.name"/>

		<propertyregex property="final.name.versioned" input="${final.name}"
			regexp="(.*)QUALIFIED_VERSION(.*)" replace="\1${version}\2" />

		<move file="${final.name}" tofile="${final.name.versioned}" verbose="true" />

		<path id="updatesite.path">
			<fileset dir="${target.dir}" includes="Liferay_IDE_ADT_*.zip" />
		</path>

		<property name="updatesite.name" value="${toString:updatesite.path}"/>

		<condition property="check.updatesite" value="true">
			<matches pattern=".*Liferay_IDE_ADT_.*-updatesite\.zip" string="${updatesite.name}" />
		</condition>

		<if>
			<isset property="check.updatesite"/>
			<then>
				<propertyregex property="final.updatesite.name" input="${updatesite.name}"
					regexp="(.*)Liferay_IDE_ADT_.*-updatesite(.*)" replace="\1liferay-ide-updatesite-${version}\2" />

				<move file="${updatesite.name}" tofile="${final.updatesite.name}" verbose="true" />
			</then>
		</if>

		<if>
			<isset property="upload"/>
			<then>
				<antcall target="upload-output-file" />
			</then>
		</if>
	</target>

	<target name="win32">
		<antcall target="create-bundle">
			<param name="os" value="win32" />
			<param name="ws" value="win32" />
			<param name="arch" value="x86" />
			<param name="eclipse.zip.name" value="${eclipse.win32.zip.name}" />
			<param name="eclipse.zip.url" value="${eclipse.win32.zip.url}" />
			<param name="output.zip.name" value="${output.win32.zip.name}" />
			<param name="upload.output.file" value="${output.win32.zip.name}" />
		</antcall>
	</target>

	<target name="win64">
		<antcall target="create-bundle">
			<param name="os" value="win64" />
			<param name="ws" value="win32" />
			<param name="arch" value="x86_64" />
			<param name="eclipse.zip.name" value="${eclipse.win64.zip.name}" />
			<param name="eclipse.zip.url" value="${eclipse.win64.zip.url}" />
			<param name="output.zip.name" value="${output.win64.zip.name}" />
			<param name="upload.output.file" value="${output.win64.zip.name}" />
		</antcall>
	</target>

	<target name="linux">
		<antcall target="create-bundle">
			<param name="os" value="linux" />
			<param name="ws" value="gtk" />
			<param name="arch" value="x86" />
			<param name="isUnix" value="true" />
			<param name="eclipse.zip.name" value="${eclipse.linux.zip.name}" />
			<param name="eclipse.tar.name" value="${eclipse.linux.tar.name}" />
			<param name="eclipse.zip.url" value="${eclipse.linux.zip.url}" />
			<param name="output.tar.name" value="${output.linux.tar.name}" />
			<param name="output.gz.name" value="${output.linux.gz.name}" />
			<param name="upload.output.file" value="${output.linux.gz.name}" />
		</antcall>
	</target>

	<target name="linux64">
		<antcall target="create-bundle">
			<param name="os" value="linux" />
			<param name="ws" value="gtk" />
			<param name="arch" value="x86_64" />
			<param name="isUnix" value="true" />
			<param name="eclipse.zip.name" value="${eclipse.linux64.zip.name}" />
			<param name="eclipse.tar.name" value="${eclipse.linux64.tar.name}" />
			<param name="eclipse.zip.url" value="${eclipse.linux64.zip.url}" />
			<param name="output.tar.name" value="${output.linux64.tar.name}" />
			<param name="output.gz.name" value="${output.linux64.gz.name}" />
			<param name="upload.output.file" value="${output.linux64.gz.name}" />
		</antcall>
	</target>

	<target name="macosx">
		<antcall target="create-bundle">
			<param name="os" value="macosx" />
			<param name="ws" value="cocoa" />
			<param name="arch" value="x86" />
			<param name="isUnix" value="true" />
			<param name="isMac" value="true" />
			<param name="eclipse.zip.name" value="${eclipse.macosx.zip.name}" />
			<param name="eclipse.tar.name" value="${eclipse.macosx.tar.name}" />
			<param name="eclipse.zip.url" value="${eclipse.macosx.zip.url}" />
			<param name="output.tar.name" value="${output.macosx.tar.name}" />
			<param name="output.gz.name" value="${output.macosx.gz.name}" />
			<param name="upload.output.file" value="${output.macosx.gz.name}" />
		</antcall>
	</target>

	<target name="macosx64">
		<antcall target="create-bundle">
			<param name="os" value="macosx" />
			<param name="ws" value="cocoa" />
			<param name="arch" value="x86_64" />
			<param name="isUnix" value="true" />
			<param name="isMac" value="true" />
			<param name="eclipse.zip.name" value="${eclipse.macosx64.zip.name}" />
			<param name="eclipse.tar.name" value="${eclipse.macosx64.tar.name}" />
			<param name="eclipse.zip.url" value="${eclipse.macosx64.zip.url}" />
			<param name="output.tar.name" value="${output.macosx64.tar.name}" />
			<param name="output.gz.name" value="${output.macosx64.gz.name}" />
			<param name="upload.output.file" value="${output.macosx64.gz.name}" />
		</antcall>
	</target>



	<target name="setup-builder">
		<if>
			<not>
				<available file="${builder.dir}/eclipse.ini"/>
			</not>
			<then>
				<antcall target="download-builder" />
				<if>
					<isset property="builder.tar.name"/>
					<then>
						<gunzip src="${downloads.dir}/${builder.zip.name}" dest="${downloads.dir}" />
						<untar src="${downloads.dir}/${builder.tar.name}" dest="${builder.dir}/../" />
					</then>
					<else>
						<unzip src="${downloads.dir}/${builder.zip.name}" dest="${builder.dir}/../" />
					</else>
				</if>
			</then>
		</if>
	</target>

	<target name="create-downloads-dir">
		<mkdir dir="${downloads.dir}"/>
	</target>

	<target name="download-builder" depends="create-downloads-dir">
		<if>
			<not>
				<available file="${downloads.dir}/${builder.zip.name}" />
			</not>
			<then>
				<get
					dest="${downloads.dir}/${builder.zip.name}"
					src="${builder.zip.url}"
					verbose="true"
				/>
			</then>
		</if>
	</target>

	<target name="setup-eclipse">
		<if>
			<not>
				<available file="${eclipse.dir}/eclipse.ini"/>
			</not>
			<then>
				<antcall target="download-eclipse" />
				<if>
					<isset property="isUnix"/>
					<then>
						<gunzip src="${downloads.dir}/${eclipse.zip.name}" dest="${downloads.dir}" />
						<untar src="${downloads.dir}/${eclipse.tar.name}" dest="${eclipse.dir}/../" />
						<if>
							<isset property="isMac" />
							<then>
								<chmod file="${eclipse.dir}/Eclipse.app/Contents/MacOS/eclipse" perm="ugo+rx" />
							</then>
							<else>
								<chmod file="${eclipse.dir}/eclipse" perm="ugo+rx" />
							</else>
						</if>
					</then>
					<else>
						<unzip src="${downloads.dir}/${eclipse.zip.name}" dest="${eclipse.dir}/../" />
					</else>
				</if>
			</then>
		</if>
	</target>

	<target name="download-eclipse" depends="create-downloads-dir">
		<if>
			<not>
				<available file="${downloads.dir}/${eclipse.zip.name}" />
			</not>
			<then>
				<get
					dest="${downloads.dir}/${eclipse.zip.name}"
					src="${eclipse.zip.url}"
					verbose="true"
				/>
			</then>
		</if>
	</target>

	<target name="clean-eclipse">
		<delete dir="${eclipse.dir}" failonerror="true" includeemptydirs="true" />
	</target>

	<target name="install-feature">
		<exec executable="${builder.exe}" outputproperty="output" failonerror="true">
			<arg value="-nosplash"/>
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.director" />
			<arg value="-repository" />
			<arg value="${repositoryURL}" />
			<arg value="-installIU" />
			<arg value="${featureId}" />
			<arg value="-destination" />
			<arg value="${eclipse.dir}" />
			<arg value="-profile" />
			<arg value="epp.package.jee" />
			<arg value="-profileProperties" />
			<arg value="org.eclipse.update.install.features=true" />
			<arg value="-bundlepool" />
			<arg value="${eclipse.dir}" />
			<arg value="-p2.os" />
			<arg value="${os}" />
			<arg value="-p2.ws" />
			<arg value="${ws}" />
			<arg value="-p2.arch" />
			<arg value="${arch}" />
			<arg value="-roaming" />
		</exec>
	</target>

	<target name="install-adt-ide-features" depends="setup-builder">
		<if>
			<available file="${builder.dir}/eclipse" />
			<then>
				<chmod file="${builder.dir}/eclipse" perm="+x" />
			</then>
		</if>

		<antcall target="clean-eclipse"/>
		<antcall target="setup-eclipse"/>

		<echo>${adt-site}</echo>
		<antcallback target="install-feature" return="output">
			<param name="repositoryURL" value="${adt-site}"/>
			<param name="featureId" value="${adt.ide.features}"/>
		</antcallback>

		<echo>${output}</echo>
	</target>

	<target name="install-tools-features" depends="setup-builder">
		<if>
			<available file="${builder.dir}/eclipse" />
			<then>
				<chmod file="${builder.dir}/eclipse" perm="+x"/>
			</then>
		</if>

		<echo>${tools.updatesite}</echo>
		<antcallback target="install-feature" return="output">
			<param name="repositoryURL" value="file://${tools.updatesite}"/>
			<param name="featureId" value="${tools.feature}"/>
		</antcallback>

		<echo>${output}</echo>
		<propertyregex property="temp" input="${output}"
    		regexp=".*feature.group (.*)\..*" replace="\1" />

		<echo file="${target.dir}/temp.txt" append="true">${temp}</echo>

		<loadfile property="tmp" srcfile="${target.dir}/temp.txt">
			<filterchain>
				<headfilter lines="1"/>
				<striplinebreaks/>
			</filterchain>
		</loadfile>

		<if>
			<isset property="forceContextQualifier"/>
			<then>
				<propertyregex property="label" input="${forceContextQualifier}" 
    				regexp="\d+-(.*)" replace="\1" />
				<propertyregex property="timestamp" input="${forceContextQualifier}"
    				regexp="(\d+).*" replace="\1" />
				<propertyregex property="unqualifiedVersion" input="${tmp}"
    				regexp="(\d+\.)(\d+\.)(\d+).*" replace="\1\2\3" />
				<if>
					<not>
						<equals arg1="${label}" arg2="$${label}" />
					</not>
					<then>
						<property name="version" value="${unqualifiedVersion}-${label}-${timestamp}" />
					</then>
					<else>
						<property name="version" value="${unqualifiedVersion}\.${timestamp}" />
					</else>
				</if>
			</then>
			<else>
				<property name="version" value="${tmp}"/>
			</else>
		</if>

		<delete file="${target.dir}/temp.txt"/>
	</target>

	<target name="install-adt-features" depends="setup-builder">
		<if>
			<available file="${builder.dir}/eclipse" />
			<then>
				<chmod file="${builder.dir}/eclipse" perm="+x"/>
			</then>
		</if>

		<antcallback target="install-feature" return="output">
			<param name="repositoryURL" value="file://${adt.updatesite}"/>
			<param name="featureId" value="${adt.feature}"/>
		</antcallback>

		<antcallback target="${package.target}" return="final.name"/>
		<echo>${final.name}</echo>
	</target>

	<target name="clean-output-dir">
		<delete file="${output.dir}/${output.tar.name}" failonerror="false" />
		<delete file="${output.dir}/${output.gz.name}" failonerror="false" />
		<delete file="${output.dir}/${output.zip.name}" failonerror="false" />
		<mkdir dir="${output.dir}" />
	</target>

	<target name="output-zip" depends="clean-output-dir">
		<if>
			<isset property="isUnix" />
			<then>
				<if>
					<available file="${eclipse.dir}/eclipse" />
					<then>
						<exec dir="${work.dir}" executable="tar" failifexecutionfails="false" failonerror="false">
							<arg value="cf" />
							<arg value="${output.dir}/${output.tar.name}" />
							<arg value="eclipse" />
						</exec>
						<gzip destfile="${output.dir}/${output.gz.name}" src="${output.dir}/${output.tar.name}" />
						<delete file="${output.dir}/${output.tar.name}" />
						<property name="final.name" value="${output.dir}/${output.gz.name}"/>
					</then>
				</if>
			</then>
			<else>
				<zip destfile="${output.dir}/${output.zip.name}" basedir="${work.dir}" />
				<property name="final.name" value="${output.dir}/${output.zip.name}"/>
			</else>
		</if>
	</target>

</project>
