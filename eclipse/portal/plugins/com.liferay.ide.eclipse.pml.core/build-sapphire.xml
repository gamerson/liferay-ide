<!--
/*******************************************************************************
 * Copyright (c) 2010-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 *******************************************************************************/
 -->

<project name="Build Sapphire" default="pre.@dot">

  <!-- ===================================================================== -->
  <!-- Steps to do before the compilation target <name>                      -->
  <!-- Substitute "name" with the name of the compilation target, eg @dot    -->
  <!-- Available parameters :                                                -->
  <!--   source.foldern : n = 1 ... N, the source folders                    -->
  <!--   target.folder  : where the results of the compilation go            -->
  <!--   <name>.classpath : name = name of the compilation target. A         -->
  <!--                      reference to the classpath structure.            -->
  <!-- ===================================================================== -->

  <target name="pre.@dot">

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="maven.runtime.classpath"/>


	<delete dir=".apt_generated" quiet="true"/>
    <mkdir dir=".apt_generated"/>
  	
    <safe-apt srcdir="src"
      destdir=".apt_generated"
      preprocessdir=".apt_generated"
      classpathref="maven.compile.classpath"
      factorypathref="maven.compile.classpath"
      compile="false"/>
      
    <delete dir=".resources" quiet="true"/>
    <mkdir dir=".resources"/>

    <trycatch property=".error">
      <try>
      
        <taskdef 
          resource="org/eclipse/sapphire/sdk/build/antlib.xml"
          classpathref="maven.compile.classpath"/>
    
        <sapphire src="src" dest=".resources"/>
        
      </try>
      <catch>

        <echo message="Skipping Sapphire build as the builder is not available yet."/>

      </catch>
    </trycatch>
    
  </target>
  
  <!--
    macro : safe-apt

    If classpath or factorypath get too long, the apt task can run into the 32k character limit 
    of Windows CreateProcess function. This macro gets around that problem by creating jar files 
    for classpath and factorypath. The only contents of these jar files is a manifest with 
    manifest classpath referencing the original classpath/factorypath entries.
  -->
     
  <macrodef name="safe-apt">
    <attribute name="srcdir"/>
    <attribute name="destdir"/>
    <attribute name="preprocessdir"/>
    <attribute name="classpathref"/>
    <attribute name="factorypathref"/>
    <attribute name="compile"/>
    <sequential>

      <classpath-to-jar classpathref="@{classpathref}" jar="apt-classpath.jar"/>
      <classpath-to-jar classpathref="@{factorypathref}" jar="apt-factorypath.jar"/>

      <path id="safe.apt.factorypath">
        <pathelement location="apt-factorypath.jar"/>
      </path>

      <apt srcdir="@{srcdir}"
           destdir="@{destdir}"
      	   debug="on"
           preprocessdir="@{preprocessdir}"
           classpath="apt-classpath.jar"
           factorypathref="safe.apt.factorypath"
           compile="@{compile}"/>

      <delete file="apt-classpath.jar"/>
      <delete file="apt-factorypath.jar"/>

    </sequential>
  </macrodef>


  <!--
    macro : classpath-to-jar

    When classpath gets too long, composing commands that reference it can cause one to exceed
    the 32k character limit of Windows CreateProcess function. This macro helps get around that 
    problem by converting classpath into a jar whose manifest references all of the original 
    classpath entries.
  -->

  <macrodef name="classpath-to-jar">
    <attribute name="classpathref"/>
    <attribute name="jar"/>
    <sequential>

      <manifestclasspath property="manifest.cp" jarfile="@{jar}" maxParentLevels="10">
        <classpath refid="@{classpathref}"/>
      </manifestclasspath>

      <manifest file="@{jar}.manifest">
        <attribute name="Class-Path" value="${manifest.cp}"/>
      </manifest>

      <jar destfile="@{jar}" manifest="@{jar}.manifest"/>

      <delete file="@{jar}.manifest"/>
      <var name="manifest.cp" unset="true"/>

    </sequential>
  </macrodef>

</project>
